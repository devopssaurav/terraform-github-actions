name: 'Terraform'

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:

permissions:
  contents: read
  issues: write

jobs:
  terraform-plan:
    name: 'Terraform Init and Plan'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Configure AWS Credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'  
        aws-region: 'us-west-2'
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Generate provider.tf file dynamically during pipeline run, get necessary items from pipeline variables
    - name: Create Provider File
      run: |
        cat <<EOF > provider.tf
            terraform {
            required_providers {
                aws = {
                source = "hashicorp/aws"
                version = "5.7.0"
                }
            }
            backend "s3" {
                bucket = "saurav-terraform-backend"
                key    = "terraform/remote/s3/terraform.tfstate"
                region = "us-west-2"
                dynamodb_table  = "terraform-locks"
            }
            }

            provider "aws" {
              region = "us-west-2"
            }
        EOF
        
        cat provider.tf

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
  
  Approve:
    needs: terraform-plan
    name: Approve the deployment
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash     
    steps:
    - name: Approval Gate
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: devopssaurav
        minimum-approvals: 1      
        issue-title: "Deploying Changes to Terraform"
        issue-body: "Please approve or deny the deployment"
        exclude-workflow-initiator-as-approver: false
        additional-approved-words: ''
        additional-denied-words: ''   
   
  terraform-apply:       
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      needs: [terraform-plan, Approve]
      runs-on: ubuntu-latest
      environment: production
      name: Terraform Apply

      defaults:
        run:
          shell: bash       

      steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      # Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'  
          aws-region: 'us-west-2'
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Generate provider.tf file dynamically during pipeline run, get necessary items from pipeline variables
      - name: Create Provider File
        run: |
          cat <<EOF > provider.tf
              terraform {
              required_providers {
                  aws = {
                  source = "hashicorp/aws"
                  version = "5.7.0"
                  }
              }
              backend "s3" {
                  bucket = "saurav-terraform-backend"
                  key    = "terraform/remote/s3/terraform.tfstate"
                  region = "us-west-2"
                  dynamodb_table  = "terraform-locks"
              }
              }

              provider "aws" {
                region = "us-west-2"
              }
          EOF
          
          cat provider.tf      
      - name: Setup Terraform  
        uses: hashicorp/setup-terraform@v1
      - name: terrform init
        run: terraform init    
      - name: Terraform Apply  
        run: terraform apply -auto-approve -input=false
